@model CGI.Reflex.Web.Models.Pickers.ServersList

@using System.Globalization
@using CGI.Reflex.Core.Entities
@using CGI.Reflex.Core.Queries

<div class="modal-header">
    <a class="close" data-dismiss="modal">x</a>
    <h3>Ajouter des serveurs</h3>
</div>
<form id="formModalAddServer" action="@Model.PostUrl">
    <div class="row-fluid">
        <div class="span6" style=" border-right: 1px solid #ddd; background-color: whiteSmoke;">
            <div class="form-search" style="padding: 5px 10px 5px 10px;">
                <div class="row-fluid">
                    <div class="span4">
                        <div class="input-prepend">
                            <span class="add-on"><i class="icon-search"></i></span>
                            <input id="searchBoxServers" type="text" style="width: 100px; margin-left: -4px;" data-select-on-focus="true">
                        </div>
                    </div>

                     @if (Model.HideWithLandscape)
                     {
                        <div class="span8" style=" text-align:right;">
                            @Html.DropDownList("envFilter", new SelectList(new List<DomainValue>(new DomainValueQuery { Category = DomainValueCategory.Environment }.OrderBy(dvc => dvc.DisplayOrder).List()), "Id", "Name"), "Environnement", new { style = "width:140px" })
                        </div>
                     }
                     else
                     {
                        <div class="span4">
                            @Html.DropDownList("envFilter", new SelectList(new List<DomainValue>(new DomainValueQuery { Category = DomainValueCategory.Environment }.OrderBy(dvc => dvc.DisplayOrder).List()), "Id", "Name"), "Environnement", new { style = "width:140px" })
                        </div>  
                     }
                    
                        @if (!Model.HideWithLandscape)
                        {
                            <div class="span4">
                                @Html.DropDownList("landscapeFilter", new SelectList(new List<Landscape>(new LandscapeQuery().OrderBy(ls => ls.Name).List()), "Id", "Name"), "Landscape", new { style = "width:140px" })
                            </div>
                        }
                    
                </div>
            </div>
            <div class="row-fluid">
                <table class="table table-condensed" style="margin-bottom: 0;">
                    <tr>
                        <th style="width: 20px;">
                            @if (Model.SelectionMode == CGI.Reflex.Web.Models.Pickers.SelectionMode.Multiple)
                            {
                                <input id="serverModalChekboxAll" type="checkbox" />
                            }
                        </th>
                        <th style="width: 50%;">
                            Nom
                        </th>
                        <th style="width: 50%;">
                            Alias
                        </th>
                    </tr>
                </table>
            </div>
            <div class="row-fluid">
                <div class="span12" style="height: 349px; overflow-y: scroll;">
                    <table id="tableServers" class="table table-striped table-condensed ie-overflow-fix" style="margin-bottom: 0;">
                        <tbody>
                            @foreach (var server in Model.Servers)
                            {
                                <tr data-server-env="@(server.Environment != null ? server.Environment.Id.ToString(CultureInfo.InvariantCulture) : "")"
                                    data-server-landscape="@(server.Landscape != null ? server.Landscape.Id.ToString(CultureInfo.InvariantCulture) : "")"
                                    data-serverid="@server.Id">
                                    <td style="width: 20px;">
                                        <input id="servers-@server.Id" name="servers" value="@server.Id" type="checkbox" data-server-name="@server.Name">
                                    </td>
                                    <td data-server-id="@server.Id" style="cursor: pointer; width: 50%;">
                                        <a data-server-id="@server.Id">@server.Name</a>
                                    </td>
                                    <td class="span2" style="width: 50%;">
                                        @server.Alias
                                    </td>
                                </tr>
                            }
                        </tbody>
                    </table>
                </div>
            </div>
        </div>
        <div class="span6" id="serverBox" style="margin-left: 0;"></div>
    </div>
    <div class="modal-footer">
        <a class="btn btn-primary" data-submit-form="true">OK</a>
        <a class="btn" data-dismiss="modal">Annuler</a>
    </div>
</form>

<script type="text/javascript">
    var serversToHide = new Array();
    @if (!string.IsNullOrEmpty(Model.HideServersFromTarget))
    {
        <text>
            $('@Model.HideServersFromTarget input').each(function () {
                serversToHide.push($(this).val());
            });
        </text>
    }

    var searchServer = function () {
        var valNom = $.trim($("#searchBoxServers").val());
        var valEnv = $.trim($("#envFilter").val());
        var valLandscape = $.trim($("#landscapeFilter").val());

        $("#tableServers tr").each(function () {
            var tr = $(this);

            if ((tr.attr("data-server-env") === valEnv || valEnv === "") &&
               (tr.attr("data-server-landscape") === valLandscape || valLandscape === "") &&
               (tr.text().search(new RegExp(valNom, "i")) != -1 || valNom === '') &&
               ($.inArray(tr.attr("data-serverid"), serversToHide) == -1)) {
                tr.show();
            } else {
                tr.hide();
            }
        });
        $('#serverModalChekboxAll').removeAttr("checked");
    };

    $('#searchBoxServers').on('keyup', searchServer);
    $('#envFilter').on('change', searchServer);
    @if (!Model.HideWithLandscape)
    {
        @:$('#landscapeFilter').on('change', searchServer);
    }


    $('[data-server-id]').on('click', function () {
        $.ajax({
            url: '@Url.Action("ServerDetails", "Pickers", new { area = "" })',
            data: { id: $(this).attr('data-server-id') },
            success: function (data) {
                $('#serverBox').html(data);
            }
        });
        return false;
    });

    $('#searchBoxServers').focus();

    @if (Model.SelectionMode == CGI.Reflex.Web.Models.Pickers.SelectionMode.Single)
    {
        <text>
            $('#tableServers :checkbox').on('change', function(event) {
                if($(this).prop('checked')) {
                    $('#tableServers :checkbox').prop('checked', false);
                    $(this).prop('checked', true);
                }
            });
        </text>
    }

    @if (!string.IsNullOrEmpty(Model.AddFunctionName))
    {
        if (Model.SelectionMode == CGI.Reflex.Web.Models.Pickers.SelectionMode.Single)
        {
		    <text>
			    $('#formModalAddServer').on('submit', function(event) {
				    var checked = $("#tableServers :checked");
                    if(checked.length > 0)
                    {
                        @Html.Raw(string.Format("{0}($(checked[0]).val(), $(checked[0]).attr('data-server-name'));", Model.AddFunctionName))
                    } else {
                        @Html.Raw(string.Format("{0}(null, null);", Model.AddFunctionName))
                    }
				    $("#largeModal").modal('hide');
				    event.preventDefault();
			    });
		    </text>
        }
        else
        {
		    <text>
			    $('#formModalAddServer').on('submit', function(event) {
				    var checkedIds = [];
                    $("#tableServers input:checked").each(function() {
                        checkedIds.push($(this).val());
				    });
                    if(checkedIds.length > 0)
                        @Html.Raw(string.Format("{0}(checkedIds);", Model.AddFunctionName))
				    $("#largeModal").modal('hide');
				    event.preventDefault();
			    });
		    </text>
        }
    }

    @if (Model.SelectionMode == CGI.Reflex.Web.Models.Pickers.SelectionMode.Multiple)
    {
        <text>
            $('#serverModalChekboxAll').on('click', function(event) {
                var check = this.checked;
                $('#tableServers input:checkbox:visible').each(function() {
                    $(this).prop("checked", check);
                });
            });

            $('#tableServers input:checkbox').on('click', function(event) {
                $('#serverModalChekboxAll').removeAttr("checked");
            });
        </text>
    }

    searchServer();
</script>